<?php

namespace AppBundle\Entity;

use AppBundle\Entity\Author;
use AppBundle\Entity\Tag;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
	public function countTotalRows($author = 'All', $tags = array())
	{
		$qb = $this->createQueryBuilder('ar')
					->select('count(ar.id)');
		if ('All'  != $author){
			$qb->where('ar.author = :author')
				->setParameter('author', $author);
		}
		if( !empty($tags)) {
			$ids = $this->getArticlesByTagIds($tags);
			$qb->andWhere('ar.id IN (:ids)')
				->setParameter('ids', $ids);
		}
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findByLimitOffset($limit, $offset, $author = 'All', $tags = array())
	{
		$qb = $this->createQueryBuilder('ar');
		if ('All'  != $author){
			$qb->where('ar.author = :author')
				->setParameter('author', $author);
		}
		if( !empty($tags)) {
			$ids = $this->getArticlesByTagIds($tags);
			$qb->andWhere('ar.id IN (:ids)')
				->setParameter('ids', $ids);
		}

		$qb->setFirstResult($offset)
			->setMaxResults($limit);
		return $qb->getQuery()->getResult();

	}

	private function getArticlesByTagIds($tags){
		$conn = $this->getEntityManager()->getConnection();
		$in = "IN (";
		foreach ($tags as $key => $value) {
			$in .= "$value, ";
		}
		$in = substr($in, 0, -2);
		$in .= ")";
		$sql = "SELECT DISTINCT(article_id) FROM article_tags WHERE tag_id $in";
		$stmt = $conn->prepare($sql);
		$stmt->execute();
		$result = $stmt->fetchAll();
		$article_ids = [];
		foreach($result as $value){
			foreach($value as $key => $id){
				$article_ids[] = $id;
			}
		}
		return $article_ids;
	}

}